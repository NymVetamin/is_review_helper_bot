import telebot
import settings
from telebot import types
import sqlite3

bot = telebot.TeleBot(settings.token)

############################################################################################################################
# –°–û–ó–î–ê–ù–ò–ï –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
def buttons(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)
    issue = types.KeyboardButton('‚ùî–í–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–≤–∞—Ä—É/–¥–æ—Å—Ç–∞–≤–∫–µ')
    want_review = types.KeyboardButton('–Ø –±—ã —Ö–æ—Ç–µ–ª–∞(–∞) –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
    done_review = types.KeyboardButton('–Ø —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∞(–∞) –æ—Ç–∑—ã–≤')
    markup.add(issue, want_review, done_review)
    mess =  f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,<b>{message.from_user.first_name}</b>!\n\n'\
            '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É  üíö\n\n'\
            '–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É '\
            '–∏–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à–±–µ–∫ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤?‚ò∫Ô∏è\n\n'\
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ'
    bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup = markup)

############################################################################################################################
# –û–¢–õ–ê–í–õ–ò–í–ê–ï–ú –í–´–ó–û–í–´ –ò–ó –ò–ù–õ–ê–ô–ù –ö–õ–ê–í–ò–ê–¢–£–†–´
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'cancel':
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        buttons(call.message)
############################################################################################################################
    elif call.data in ('send_screenshot', 'change_review'):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        done_review_st2(call.message)
    elif call.data.startswith('send_review'):
        with sqlite3.connect('is_base.db') as base:
            cur = base.cursor()
            cur.execute('UPDATE users SET review == ? WHERE id_tg == ? AND ven_code == ?', (True, call.message.chat.id, int(call.data[12:])))
            mess = '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üëç,'\
                    'ec–ª–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫—ç—à–±—ç–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n'\
                    '–í—Å–µ–≥–æ –í–∞–º –¥–æ–±—Ä–æ–≥–æ –∏ –¥–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—áüòä'
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, mess, parse_mode = 'html')
            data = cur.execute('SELECT ven_code, name, screenshot_id FROM users WHERE id_tg == ?', (call.message.chat.id, )).fetchone()
        mess = '<b>–û—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n'\
                f'–¢–æ–≤–∞—Ä: <b>{data[0]}</b>\n'\
                f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{data[1]}</b>'
        bot.send_photo(settings.admin, data[2], caption = mess, parse_mode = 'html')
    elif call.data == 'change_screenshot':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞.')
        bot.register_next_step_handler(call.message, handle_screen)
    elif call.data == 'change_issue':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        issue(call.message)
############################################################################################################################
    elif call.data == 'send_issue':
        mess = '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É, —Å–ø–∞—Å–∏–±–æ!'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = mess, reply_markup=None)
        with sqlite3.connect('is_base.db') as base:
            cur = base.cursor()
            data = cur.execute('SELECT name, ven_code, issue FROM users WHERE id_tg == ?', (call.message.chat.id, )).fetchone()
        mess = '<b>–í–æ–ø—Ä–æ—Å/–∑–∞–º–µ—á–∞–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n'\
                f'–¢–æ–≤–∞—Ä: <b>{data[1]}</b>\n'\
                f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{data[0]}</b>\n'\
                f'–¢–µ–∫—Å—Ç:\n\n{data[2]}'
        bot.send_message(settings.admin, mess, parse_mode = 'html')
############################################################################################################################
# –í–´–í–û–î –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–û–ú –ö–ê–ö –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í
def make_review_info(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    mess = '–û—Ç–ª–∏—á–Ω–æ! ‚ò∫Ô∏è\n\n'\
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –í–∞–º –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ 6 —à–∞–≥–æ–≤ :\n'\
            '‚ñ´Ô∏è–ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n'\
            '‚ñ´Ô∏è–ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à–∫–æ–π –Ω–∞ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–∫—É–ø–∫–∏"\n'\
            '‚ñ´Ô∏è–ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à–∫–æ–π –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É –Ω–∞—Å –∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"\n'\
            '‚ñ´Ô∏è–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É\n'\
            '‚ñ´Ô∏è–ö–ª–∏–∫–Ω–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"\n'\
            '‚ñ´Ô∏è–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç.'
    bot.send_message(message.chat.id, mess, parse_mode = 'html')

############################################################################################################################
# –î–ò–ê–õ–û–ì –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –û–ë –û–°–¢–ê–í–õ–ï–ù–ù–û–ú –û–¢–ó–´–í–ï
def done_review(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    mess = '–ö–ª–∞—Å—Å! üòä –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞,'\
            '–∏–º—è (–ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ Wildberries), '\
            '–∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º –±–æ–Ω—É—Å.\n\n'\
            '‚ñ´Ô∏è–ö–∞–∫ –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤?\n'\
            '–í –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –≤—Å–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –í–∞–º–∏ –æ—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å" ‚û°Ô∏è "–ü–æ–∫—É–ø–∫–∏".\n'\
            '–í –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞–≥–ª—è–¥–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.\n\n'\
            '–ï—Å–ª–∏ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.'
    bot.send_message(message.chat.id, mess, parse_mode = 'html')
    bot.register_next_step_handler(message, handle_screen)

def done_review_st2(message):
    prev_mes = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤', reply_markup=cancel_markup())
    bot.register_next_step_handler(message, done_review_st3, prev_mes)

def done_review_st3(message, prev_mes):
    user_name = message.text
    mess = '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n\n'\
            '‚ñ´Ô∏è–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?'\
            '–í –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '\
            '"–ü—Ä–æ—Ñ–∏–ª—å" ‚û°Ô∏è "–ü–æ–∫—É–ø–∫–∏". –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—É—Ç—å –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ê—Ä—Ç–∏–∫—É–ª.'
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    prev_mes = bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup = cancel_markup())
    bot.register_next_step_handler(message, done_review_st4, user_name, prev_mes)

def done_review_st4(message, user_name, prev_mes):
    ven_code = message.text
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    if not ven_code.isdecimal():
        prev_mes = bot.send_message(message.chat.id, '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=cancel_markup())
        bot.register_next_step_handler(message, done_review_st4, user_name, prev_mes)
        return False
    mess = f'–í–∞—à–µ –∏–º—è: <b>{user_name}</b>\n'\
            f'–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: <b><u>{ven_code}</u></b>\n'\
            '–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?'
    with sqlite3.connect('is_base.db') as base:
        cur = base.cursor()
        is_review = cur.execute('SELECT review FROM users WHERE id_tg == ? AND ven_code == ?', (message.chat.id, ven_code)).fetchone()
        if is_review:
            if is_review[0]:
                bot.send_message(message.chat.id, '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ', parse_mode = 'html')
                buttons(message)
                return False
        cur.execute('UPDATE users SET name == ?, ven_code == ? WHERE id_tg == ?', (user_name, ven_code, message.chat.id))
        base.commit()
    markup = types.InlineKeyboardMarkup(row_width = 2)
    yes = types.InlineKeyboardButton('–î–∞', callback_data = 'send_review' + str(ven_code))
    no = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data = 'change_review')
    cancel = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
    markup.add(yes, no, cancel)
    bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup = markup)

############################################################################################################################
# –û–¢–õ–ê–í–õ–ò–í–ê–ï–ú –°–ö–†–ò–ù–®–û–¢–´ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# @bot.message_handler(content_types = ['photo'])
def handle_screen(message, prev_mes = 0):
    if prev_mes:
        bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    if not message.photo:
        prev_mes = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç', parse_mode = 'html', reply_markup = cancel_markup())
        bot.register_next_step_handler(message, handle_screen, prev_mes)
        return False
    file_id = message.photo[-1].file_id
    with sqlite3.connect('is_base.db') as base:
        cur = base.cursor()
        if (cur.execute('SELECT id FROM users WHERE id_tg == ?', (message.chat.id, )).fetchone()):
            cur.execute('UPDATE users SET screenshot_id == ? WHERE id_tg == ?', (file_id, message.chat.id))
        else:
            cur.execute('INSERT INTO users(id_tg, screenshot_id) VALUES (?, ?)', (message.chat.id, file_id))
        base.commit()
    markup = types.InlineKeyboardMarkup(row_width = 1)
    ok = types.InlineKeyboardButton('‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data = 'send_screenshot')
    cancel = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
    change_screen = types.InlineKeyboardButton('üîÑ–ó–∞–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', callback_data = 'change_screenshot')
    markup.add(ok, change_screen, cancel)
    bot.send_photo(message.chat.id, file_id, caption = '–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω', reply_markup = markup)

############################################################################################################################
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ –ü–†–ò –î–ò–ê–õ–û–ì–ï –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
def cancel_markup():
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    markup.add(cancel)
    return markup


############################################################################################################################
# –î–ò–ê–õ–û–ì –û –í–û–ü–†–û–°–ï\–ü–†–ï–¢–ï–ù–ó–ò–ò –ö –¢–û–í–ê–†–£ –ò–õ–ò –î–û–°–¢–ê–í–ö–ï
def issue(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    mess = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∑–∞–∫–∞–∑'
    prev_mes = bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup=cancel_markup())
    bot.register_next_step_handler(message, issue_st2, prev_mes)

def issue_st2(message, prev_mes):
    user_name = message.text
    mess = '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n\n'\
            '‚ñ´Ô∏è–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?'\
            '–í –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '\
            '"–ü—Ä–æ—Ñ–∏–ª—å" ‚û°Ô∏è "–ü–æ–∫—É–ø–∫–∏". –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—É—Ç—å –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ê—Ä—Ç–∏–∫—É–ª.'
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    prev_mes = bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup=cancel_markup())
    bot.register_next_step_handler(message, issue_st3, user_name, prev_mes)

def issue_st3(message, user_name, prev_mes):
    ven_code = message.text
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    if not ven_code.isdecimal():
        prev_mes = bot.send_message(message.chat.id, '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=cancel_markup())
        bot.register_next_step_handler(message, issue_st3, user_name, prev_mes)
        return False
    mess = f'<b>{user_name}</b>, –æ–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å '\
            f'–æ —Ç–æ–≤–∞—Ä–µ <u>{ven_code}</u> –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏'
    prev_mes = bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup=cancel_markup())
    bot.register_next_step_handler(message, issue_st4, user_name, ven_code, prev_mes)

def issue_st4(message, user_name, ven_code, prev_mes):
    issue_text = message.text
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_mes.message_id, reply_markup=None)
    mess = f'–í–∞—à–µ –∏–º—è: <b>{user_name}</b>\n'\
            f'–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: <b><u>{ven_code}</u></b>\n\n'\
            f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{issue_text}\n\n'\
            '–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?'
    with sqlite3.connect('is_base.db') as base:
        cur = base.cursor()
        if cur.execute('SELECT id FROM users WHERE id_tg == ?', (message.chat.id,)).fetchone():
            cur.execute('UPDATE users SET name == ?, ven_code == ?, issue == ? WHERE id_tg == ?', (user_name, ven_code, issue_text, message.chat.id))
        else:
            cur.execute('INSERT INTO users(id_tg, name, ven_code, issue) VALUES (?, ?, ?, ?)', (message.chat.id, user_name, ven_code, issue_text))
        base.commit()
    markup = types.InlineKeyboardMarkup(row_width = 2)
    yes = types.InlineKeyboardButton('–î–∞', callback_data = 'send_issue')
    no = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data = 'change_issue')
    cancel = types.InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
    markup.add(yes, no, cancel)
    bot.send_message(message.chat.id, mess, parse_mode = 'html', reply_markup = markup)

############################################################################################################################
# –û–¢–õ–ê–í–õ–ò–í–ê–ï–ú –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@bot.message_handler(content_types = ['text'])
def check_messages(message):
    if message.text == '‚ùî–í–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–≤–∞—Ä—É/–¥–æ—Å—Ç–∞–≤–∫–µ':
        issue(message)
    elif message.text == '–Ø –±—ã —Ö–æ—Ç–µ–ª–∞(–∞) –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        make_review_info(message)
    elif message.text == '–Ø —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∞(–∞) –æ—Ç–∑—ã–≤':
        done_review(message)
    else:
        buttons(message)
############################################################################################################################
# –¢–û–ß–ö–ê –í–•–û–î–ê
if __name__ == '__main__':
    bot.infinity_polling()